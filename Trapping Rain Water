#include <vector>
#include <algorithm>

using namespace std;

class Solution {
public:
	int trap(vector<int>& height) {

		if (height.empty() || height.size() == 1)
			return 0;

		vector<int> section;	// 배열의 좌,우로 최대높이가 커질 때마다 섹션 분리함
		int maxHeight = 0;
		int frontBack = 0;
		int answer = 0;

		// 앞에서부터 섹션 분리
		for (int cur = 0; cur < height.size(); cur++)
			if (maxHeight < height[cur])
			{
				maxHeight = height[cur];
				section.push_back(cur);
			}

		// 체크된 마지막 섹션까지 뒤에서부터 다시 섹션 분리
		frontBack = section.size();
		maxHeight = 0;
		for(int cur = height.size() - 1; cur > section[frontBack - 1]; cur--)	// 여기서 section[frontBack - 1]은 앞에서부터 센 마지막 섹션을 의미
			if (maxHeight < height[cur])
			{
				maxHeight = height[cur];
				section.insert(section.begin() + frontBack,cur);	// 섹션의 오름차순을 유지하기 위해 insert 사용
			}

		// 섹션마다 차오른 물의 양 측정
		for (int i = 0; i < section.size() - 1; i++)
			for (int cur = section[i] + 1; cur < section[i + 1]; cur++)
				answer += min(height[section[i]], height[section[i + 1]]) - height[cur];

		return answer;
	}
};
